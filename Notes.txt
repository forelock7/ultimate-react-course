*****************************************************************************************************************
Section 3: A First Look at React
*****************************************************************************************************************

- Vanila JS - pure JS without any framework, but can be Jquery

- Vanila JS vs React: https://codesandbox.io/s/react-first-app-advice-52879f

- React - JS library for building user interfaces. 
1) Based on components - combining blocks of complex UI
2) Declarative 
 + describe how components look like and how they work using a declarative syntax called JSX.  
 + Declarative telling React what a component shoulld look like, based on current data/State
 + React is abstraction away from DOM: we never touch the DOM(like vanilla JS)
 + JSX: a syntax that combines HTML, CSS, JS as well as referencing other components.
3) State-driven: REACT reacts to state changes by re-rendering the UI. State -> Render -> UI(Component written with JSX) -> Action on UI -> Update state -> Re-render -> UI
4) JS library - React is just library (not framework), because it's only the 'view' layer. We need to pick multiple external libraries to build a comlete application. Complite frameworks built on top of React - NEXT.js, Remix
5) Extremely popular - a lot of companies use React
6) Created by facebook in 2011 by Jordan Walke

- Two option for setting up a project
1) create-react-app (complete 'starter kit', ESLint, Prettier, Jest etc) - slow and outdated technologies. It's used for small projects.
2) VITE - modern too. Need to manually set up ESLint. Extrimaly fast host replacement (HMR) and bundling. It's used for real projects

- NEXT.js and Remix framework provide more functionality than Vanila React by itself.

- Create React project from scratch using 'create-react-app' 
npx create-react-app@5 pizza-menu

- To run JS/TS inside VScode use 'Quokka.js' extansios

*****************************************************************************************************************
Section 5: Working With Components, Props, and JSX
*****************************************************************************************************************

- Start React project 
npm run start

- React apps are entirely made out of components
- building blocks of user inerfaces in React
- Piece of UI that has its own 'data', 'logic' and 'appearance' (how it works and looks)
- We build complex UIs by building multiple components and combining them
- Components can be reused, nested inside each other and pass data between them

- Component tree - to understand the structure (Parent and child components)

- Rules for functions of components:
1) function name must start with capital letter 
2) function must return murkup (html)
3) Each component can return only one element (correct: <div><h1>Bla</h1><h2>Bla</h2></div>, wrong: <h1>Bla</h1><h2>Bla</h2>)
4) Never nest component function in component function

- Component:
+ data
+ logic
+ appearance

- JSX:
  + Declarative syntax to describe what components look like and how they work
  + Components must return a block of JSX
  + Extension of JS that allows us to embed following elements into HTML:
    1) JS
    2) CSS
    3) React Components

- BABEL in React convert HTML with JSX into JS. (you can use just JS functions instead of JSX syntax)

- Imperative approach - "How to do this" - create elements via Vanila JS 
   + Manual DOM element selections and DOM traversing.
   + Step-by-Step DOM mutation until we reach the desired UI
- Declarative approach - "What we want"
   + Describe what UI should look like using JSX, based on current data
   + React is an abstraction away from DOM: we never touch the DOM
   + Instead, we think of the UI as a reflection of the current data

- alert can happen twice because of 'strict' mode 

- One technology per file (traditional)
- One component per file (React new paradigm)

- Use JS code in JSX syntax - just cover with {}
        <p>{props.ingredient}</p>

- props in React: if you need use something except string - use JS mode {}
      <Pizza
        name="Pizza Spinaci"
        ingredient="Tomato, mozarella, spinach, and ricotta cheese"
        photoName="pizzas/spinaci.jpg"
        price={10}
      />

- Props are used to pass data from parent to child component

- Props are read-only, they are immutable. This is one of React's strict Rules

- If you need to mutate props, you actually need state

- One-way Data Flow - Data can pass only from parent top child!!! (Angular has two-way data flow)
    + more predictable
    + easier to debug
    + more performant

- Challenge #1: https://codesandbox.io/s/profile-card-v1-2hrm4p?file=/src/index.js

- In JS moed {} you can place JS expression (reference vars, create arrays or objects, [].map? ternary operator)
- In JS mode statements are not allowed (if/else, for, switch)
- JSX can be written enywhere inside a components (in if/else, assign to vars, pass it into functions)
- Piece of JSX can only have one root element. If you need more, use <REact.Frgment> (or the short <>)

- If we use iteration in REact, you should use 'key' unique property to avoid console log errors
function Menu() {
  return (
    <main className="menu">
      <h2>Our menu</h2>

      <div>
        {pizzaData.map((pizza) => (
          <Pizza pizzaObj={pizza} key={pizza.name} />
        ))}
      </div>
    </main>
  );
}

- Shortcircuting in React. Use only boolean value (NOT truthy or falsy value), because boolean values are not returned:
      {numPizzas > 0 && (
        <ul className="pizzas">
          {pizzas.map((pizza) => (
            <Pizza pizzaObj={pizza} key={pizza.name} />
          ))}
        </ul>
      )}

- In LS mode we can use if/else statement or any other JS code, except code that produce some value

- common technic to return 'null'
function Pizza(props) {
  if (props.pizzaObj.soldOut) return null;
  return (
    <li className="pizza">
      <img src={props.pizzaObj.photoName} alt={props.pizzaObj.name} />
      <div>
        <h3>{props.pizzaObj.name}</h3>
        <p>{props.pizzaObj.ingredients}</p>
        <span>{props.pizzaObj.price}</span>
      </div>
    </li>
  );
}

- props can be destructuring
function Pizza(props)
function Pizza({ pizzaObj })

- React fragment - use if you need to combane 2 elements without wrappimg them into another one
        <>
          <p>
            Authentic Italian cuisine. 6 creative dishes to choose from. All from our stone oven,
            all organic, all delicious.
          </p>
          <ul className="pizzas">
            {pizzas.map((pizza) => (
              <Pizza pizzaObj={pizza} key={pizza.name} />
            ))}
          </ul>
        </>

- if you need add some key to React fragment, just use following fragment
<React.Fragment key={ghdsghd}>
.....
</ React.Fragment>

- three options in JSX
      <span>
        {level === "advanced" && "üí™"}
        {level === "intermediate" && "üëç"}
        {level === "begginer" && "üê£"}
      </span>

*****************************************************************************************************************
Section 6: State, Events, and Forms: Interactive Components
*****************************************************************************************************************