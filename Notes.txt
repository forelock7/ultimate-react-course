*****************************************************************************************************************
Section 3: A First Look at React
*****************************************************************************************************************

- Vanila JS - pure JS without any framework, but can be Jquery

- Vanila JS vs React: https://codesandbox.io/s/react-first-app-advice-52879f

- React - JS library for building user interfaces. 
1) Based on components - combining blocks of complex UI
2) Declarative 
 + describe how components look like and how they work using a declarative syntax called JSX.  
 + Declarative telling React what a component shoulld look like, based on current data/State
 + React is abstraction away from DOM: we never touch the DOM(like vanilla JS)
 + JSX: a syntax that combines HTML, CSS, JS as well as referencing other components.
3) State-driven: REACT reacts to state changes by re-rendering the UI. State -> Render -> UI(Component written with JSX) -> Action on UI -> Update state -> Re-render -> UI
4) JS library - React is just library (not framework), because it's only the 'view' layer. We need to pick multiple external libraries to build a comlete application. Complite frameworks built on top of React - NEXT.js, Remix
5) Extremely popular - a lot of companies use React
6) Created by facebook in 2011 by Jordan Walke

- Two option for setting up a project
1) create-react-app (complete 'starter kit', ESLint, Prettier, Jest etc) - slow and outdated technologies. It's used for small projects.
2) VITE - modern too. Need to manually set up ESLint. Extrimaly fast host replacement (HMR) and bundling. It's used for real projects

- NEXT.js and Remix framework provide more functionality than Vanila React by itself.

- Create React project from scratch using 'create-react-app' 
npx create-react-app@5 pizza-menu

- To run JS/TS inside VScode use 'Quokka.js' extansios

*****************************************************************************************************************
Section 5: Working With Components, Props, and JSX
*****************************************************************************************************************

- Start React project 
npm run start

- React apps are entirely made out of components
- building blocks of user inerfaces in React
- Piece of UI that has its own 'data', 'logic' and 'appearance' (how it works and looks)
- We build complex UIs by building multiple components and combining them
- Components can be reused, nested inside each other and pass data between them

- Component tree - to understand the structure (Parent and child components)

- Rules for functions of components:
1) function name must start with capital letter 
2) function must return murkup (html)
3) Each component can return only one element (correct: <div><h1>Bla</h1><h2>Bla</h2></div>, wrong: <h1>Bla</h1><h2>Bla</h2>)
4) Never nest component function in component function

- Component:
+ data
+ logic
+ appearance

- JSX:
  + Declarative syntax to describe what components look like and how they work
  + Components must return a block of JSX
  + Extension of JS that allows us to embed following elements into HTML:
    1) JS
    2) CSS
    3) React Components

- BABEL in React convert HTML with JSX into JS. (you can use just JS functions instead of JSX syntax)

- Imperative approach - "How to do this" - create elements via Vanila JS 
   + Manual DOM element selections and DOM traversing.
   + Step-by-Step DOM mutation until we reach the desired UI
- Declarative approach - "What we want"
   + Describe what UI should look like using JSX, based on current data
   + React is an abstraction away from DOM: we never touch the DOM
   + Instead, we think of the UI as a reflection of the current data

- alert can happen twice because of 'strict' mode 

- One technology per file (traditional)
- One component per file (React new paradigm)

- Use JS code in JSX syntax - just cover with {}
        <p>{props.ingredient}</p>

- props in React: if you need use something except string - use JS mode {}
      <Pizza
        name="Pizza Spinaci"
        ingredient="Tomato, mozarella, spinach, and ricotta cheese"
        photoName="pizzas/spinaci.jpg"
        price={10}
      />

- Props are used to pass data from parent to child component

- Props are read-only, they are immutable. This is one of React's strict Rules

- If you need to mutate props, you actually need state

- One-way Data Flow - Data can pass only from parent top child!!! (Angular has two-way data flow)
    + more predictable
    + easier to debug
    + more performant

- Challenge #1: https://codesandbox.io/s/profile-card-v1-2hrm4p?file=/src/index.js

- In JS mode {} you can place JS expression (reference vars, create arrays or objects, [].map, ternary operator)
- In JS mode statements are not allowed (if/else, for, switch)
- JSX can be written anywhere inside components (in if/else, assign to vars, pass it into functions)
- Piece of JSX can only have one root element. If you need more, use <Raact.Fragment> (or the short <>)

- If we use iteration in React, you should use 'key' unique property to avoid console log errors
function Menu() {
  return (
    <main className="menu">
      <h2>Our menu</h2>

      <div>
        {pizzaData.map((pizza) => (
          <Pizza pizzaObj={pizza} key={pizza.name} />
        ))}
      </div>
    </main>
  );
}

- Shortcircuting in React. Use only boolean value (NOT truthy or falsy value), because boolean values are not returned:
      {numPizzas > 0 && (
        <ul className="pizzas">
          {pizzas.map((pizza) => (
            <Pizza pizzaObj={pizza} key={pizza.name} />
          ))}
        </ul>
      )}

- In LS mode we can use if/else statement or any other JS code, except code that produce some value

- common technic to return 'null'
function Pizza(props) {
  if (props.pizzaObj.soldOut) return null;
  return (
    <li className="pizza">
      <img src={props.pizzaObj.photoName} alt={props.pizzaObj.name} />
      <div>
        <h3>{props.pizzaObj.name}</h3>
        <p>{props.pizzaObj.ingredients}</p>
        <span>{props.pizzaObj.price}</span>
      </div>
    </li>
  );
}

- props can be destructuring
function Pizza(props)
function Pizza({ pizzaObj })

- React fragment - use if you need to combane 2 elements without wrappimg them into another one
        <>
          <p>
            Authentic Italian cuisine. 6 creative dishes to choose from. All from our stone oven,
            all organic, all delicious.
          </p>
          <ul className="pizzas">
            {pizzas.map((pizza) => (
              <Pizza pizzaObj={pizza} key={pizza.name} />
            ))}
          </ul>
        </>

- if you need add some key to React fragment, just use following fragment
<React.Fragment key={ghdsghd}>
.....
</ React.Fragment>

- three options in JSX
      <span>
        {level === "advanced" && "üí™"}
        {level === "intermediate" && "üëç"}
        {level === "begginer" && "üê£"}
      </span>

*****************************************************************************************************************
Section 6: State, Events, and Forms: Interactive Components
*****************************************************************************************************************

- Set style for element
        <button style={{ backgroundColor: '#7950f2', color: '#fff' }}>Previous</button>

- Set click event for element ('onClick')
<button style={{ backgroundColor: '#7950f2', color: '#fff' }} onClick={() => alert('Next')}>

- Alert Function immidiatly run (NOT valid for this case)
<button onClick={alert('Next')}>

- Mouse handler
onMouseEnter={() => alert('TEST')}

- Another way to define handler function
  ........
  function handlePrevious() {
    alert('Previous');
  }
  return (
    ........
        <button style={{ backgroundColor: '#7950f2', color: '#fff' }} onClick={handlePrevious}>
    ........

- State - data that a component can hold over time, necessary for information that it needs to remember throughout the app's lifecucle
- "Component's memory"
- Component state - single local component variable ("Piece of state", "State variable")
- Updating component state triggers React to re-render the component

- Component View - when component is rendered

- State allows:
    1) Upfate the component's view (by re-rendering)
    2) Persist local variables between renders

- Use state in code, where 'step' - variable, 'setStep' - function to update state, 'useState' - function to create a state with init value
  const [step, setStep] = useState(1);
  function handlePrevious() {
    if (step > 1) setStep(step - 1);
  }

- Do NOT update state like this:
step = step + 1

- Update State -> Re-render component -> View
- In React, a view is updated by re-rendering the component
- A component is re-rendered when its state is updated
- DATA <-> UI

- Use ONLY callback function to update State
    if (step < 3) setStep((s) => s + 1);
    // BAD PRACTICE:
    if (step < 3) setStep(step + 1);

- UI as a function of state. UI as a reflection of data changing pver time

- For data that should not trigger re-rendering UI do not use state

- Prevent default action when submit form
function Form() {
  function handleSubmit(e) {
    e.preventDefault();
  }
  return (
    <form className="add-form" onSubmit={handleSubmit}>
    .....

- State 
  + internal data, owned by component
  + Component "memory"
  + Can be updated by component itself
  + Updating state causes component to re-render
  + Used to make components interactive

- Props:
  + External data, owned by parent component
  + Similar to function parameters
  + Read-only
  + Receiving new props causes component to re-render. Usually when the parent's state has been updated
  + Used by parent to configure child component ("settings")

  - https://codesandbox.io/s/react-exercise-flashcards-starter-sx254w?file=/src/App.js
  - https://codesandbox.io/s/date-counter-v2-d23kg4?file=/src/App.js

*****************************************************************************************************************
Section 7: Thinking In React: State Management
*****************************************************************************************************************

- The "Thinking in React" process:
  1. Break the desired UI into components and estabish the component tree
  2. Build a static version in React (without state)
  3. Think about state:                                       |
    + When to use state                                       |
    + Types of state: local vs global                         |
    + Where to place each piece of state                      | State managment
  4. Establish data flow:                                     |  
    + One-way data flow                                       |
    + Child-to-parent communication                           |
    + Accessing global state                                  |

- Local State - only for one or few components, child components
- Global State - many components. Shared state that accessible to every component in the entire applicatio. (by React Context API, Redux). Use firstly local state!!!!

- Pass function as props:
      export default function App() {
        ....
        function handleAddItems(item) {
          setItems((items) => [...items, item]);
        }
        return (
          <div className="app">
            ....
            <Form onAddItems={handleAddItems} />
            ....
          </div>
        );
      }
      function Form({ onAddItems }) {
          ......
          onAddItems(newItem);
          ......
        }

- "Lifting Up State" - just moving state of component to parent component if you need access to state of several sibling component. 
Child-to parent communication (inverse data flow): child updating parent state (data "flowing" up). Use set function of state in child to update state.

- Derived state(–ø–æ—Ö—ñ–¥–Ω–∏–π) - state that is computed from an existing piece of state or from props
Do not need to devide state of object to several states of elements of that object. Just use regular vars, no useState. State of object is the single state of thruth for related data.

- Sort items in alphabetical order
if (sortBy === 'description') sortedItems = items.slice().sort((a, b) => a.description.localeCompare(b.description));

- Sort by boolean and number:
  if (sortBy === 'packed') sortedItems = items.slice().sort((a, b) => Number(a.packed) - Number(b.packed));

  - 'children' Props
  props.children
  Example:
            <Button textColor="#fff" bgColor="#7950f2" onClick={handlePrevious}>
              <span>üëà</span> Previous
            </Button>
            ......
            function Button({ textColor, bgColor, onClick, children }) {
              return (
                <button style={{ backgroundColor: bgColor, color: textColor }} onClick={onClick}>
                  {children}
                </button>
              );
            }

- Work with current state inside setState method
    const [selectedFriend, setSelectedFriend] = useState(null);
    function handleSelection(friend) {
      setSelectedFriend((cur) => (cur?.id === friend.id ? null : friend));
    }

*****************************************************************************************************************
Section 10: Thinking in React: Components, Composition, and Reusability
*****************************************************************************************************************

- Split a UI into component:
  1) Logical separation of content/layout
  2) Reusability
  3) Resposibility / complexity
  4) Personal coding style

- Start from building big component and then split it if necessary

- Categories of Components:
  1) Stateless / presentational components - no state, can receive props and simply present received data or other content, usually small and reusable
  2) Stateful components - have state, can still be reusable
  3) Structural components - pages/layouts/screens of app, result of composition, can be huge and non-reusable(but don't have to)

- Component Composition:
1.
  function Model() {
    return (
      <div>
        <Success />
      </div>
    )
  }
2. - makes component reusable!!!!!
  function Model({ children }) {
    return (
      <div>
        {children}
      </div>
    )
  }

- Passing Elements as props
    <Box element={<Movie />} />
  instead of 
    <Box>
      <Movie />
    </Bob>

- Props as an API of component - try to have balance of props, their number should be enough, but not too many
    <StarRating maxRating={5} messages={['Terrible', 'Bad', 'Okay', 'Good', 'Amazing']} />
    <StarRating maxRating={5} color="red" className="test" defaultRating={3} />
    ......
    export default function StarRating({
      maxRating = 5,
      color = '#fcc419',
      size = 48,
      className = '',
      messages = [],
      defaultRating = 0,
    }) 

- Validation of props type. This approach is outdated. Now just use TypeScript
    import PropTypes from 'prop-types';
    StarRating.propTypes = {
      maxRating: PropTypes.number,
      defaultRating: PropTypes.number,
      color: PropTypes.string,
      size: PropTypes.number,
      messages: PropTypes.array,
      className: PropTypes.string,
      onSetRating: PropTypes.func,
    };

*****************************************************************************************************************
Section 11: How React Works Behind the Scenes
*****************************************************************************************************************

- Component -> Component Instance -> React Element -> DOM Element (HTML)

- How components are displayed on the screen:
  1. Trigger (Render is triggered (Updating State))
  2. Render Phase (React calls component funcs and figures out how DOM should be updated) - it's quite different than rendering UI
  3. Commit Phase (React actually writes to the DOM, updating, inserting and deleting elements)
  4. Browser paint

- The render process is triggered for the enire application
- In practice, it looks like React only re-render the component where the state update happens, but that's not how it works behind the Scenes
- Renders are not triggered immediately, but scheduled for when the JS engine has some "free time". There is also batching of multiple setState calls in event handlers

- Rendering in React is calling component function, not updating screen/DOM
- Virtual DOM - React element(component) tree
- Rendering a component will cause all of its child components to be rendered as well (no matter if props changed or not). Necessary because React doesn't know whether children will be affacted
- Reconciliation - deciding which DOM elements actually need to be inserted, deleted or updated in order to reflect the latest state changes.
- Reconciler - engine of React. It allows us never touch DOM directly, instead tells the React how next snapshot of UI should look like.
- Fiber is current reconciler of React. It takes React element tree (virtual DOM) and builds Fiber Tree based on it.
- Fiber tree - internal tree that has a 'fiber' for each component instance and DOM element. Fibers are NOT re-create on every render, it's mutable!
- Work can be done asynchronously - Rendering process can be split into chunks, tasks can be prioritized and work can be paused, reused or thrown away. Enables concurrent features like Suspense or transitions. Long renders won't block JS engine
- After updating of Virtual DOM executes Reconciliation + Diffing - compering current fiber tree with new Virtual DOM and updating Fiber Tree (build workInProgress tree) 
- List of effects (List of DOM updates) - result of Render Phase

- Commit Phase - updating DOM based on "List of DOM updates"
- Committing is synchronous: DOM is updated in one go, it can't be interrupted.

- After the Commit phase completes, the workInProgress fiber tree becomes the current tree for the next cycle
- Browser paint - is next after Commit phase - updated UI on the sceen.

1. Trigger (change state)
2. Render Phase - is performed by 'React' (never touch the DOM)
3. Commit Phase - is performed by 'ReactDOM'(browsers), 'React Native' (IOS, android), 'Remotion' (video) etc.
4. Browser Paint - is performed by browser (or IOS, android, video etc)

- Diffing uses 2 fundamental assumption (rules):
  1. Two elements of different types will produce different trees
  2. Elements with a stable key prop stay the same across renders

- Two situation:
  1. Same position, DIFFERENT element:
    + React assumes entire sub-tree is no longer valid
    + Old components are destroyed and removed from DOM, including state
    + Tree might be rebuild if children the same (state is reset)
  2. Same position, SAME elements, but some props are changed:
    + Element will be kept (as well as child elements), including state
    + New props / attributes are passed if they changed between renders
    + Sometimes this is not what we want... Then we can use the key prop

- Key Prop - special that we use to tell the diffing algorithm that an element is unique
  + Allows React to distinguish between multiple instances of the same component type
  + When a key stays the same across renders, the element will be kept in the DOM (even if the position in the tree changes)
    1. Using keys in List
  + When a key changes between renders, the element will be destroyed and a new one will be created (even if the position in the tree is the same as before)
    2. Using key to reset state

- Types of logic in React components
  1. Render logic
    + top level of the component function
    + describes how component view looks like
    + execute every time the component renders
  2. Event handler functions
    + executed as a consequence of the event that the handler is listening for
    + code that actually update state, perform an HTTP requests, read an input field, navigate to another pages

- Functional programming principales:
  + Side effect: dependancy on or modification of any data outside the function scope. Interaction with the outside world(mutating external vars, HTTP requests, writing DOM)
      const areas = {};
      function circleArea(r) {
        areas.circle = 3.14 * r * r;
      }
  + Pure function: has no side effects. Does not change any vars outside its scope. Give the same input, a pure function always returns the same output
      function circleArea(r) {
        return 3.14 * r * r;
      }
  + Inpure function (first function is also inpure):
      function circleArea(r) {
        const date = Date.now();       <---------
        const area = 3.14 * r * r;
        return `${date}: ${area}`
      }

- Rules for Render logic"
  + Components must be pure when it comes to render logic: given the same props(input), a component instance should always return the same JSX (output)
  + Render logic must produce no side effects: no interactions with 'outside world' is allowed:
    * Do NOT perform network requests (API calls)
    * Do NOT start timers
    * Do NOT directly use the DOM API
    * Do NOT mutate objects or vars outside the function scope
    * Do NOT update state (or refs): this will create an infinite localeCompare
- Side effects are allowed (and encouraged) in event handler functions. There is special hook to register side effects (useEffect)

- How State updates are batched:
  const reset = function() {
    setAnswer('');
    console.log(answer);
    setBest(true);
    setSolved(false);
  }
- React will update all 3 states together and then render and commit. So answer !== ''.
- If we need update state based on previous update, use setState with callback:
    console.log(setAnswer(answer => ...));

- React 18+ supports not only 'Event Handlers' as React 17, but also:
  + Timeouts
  + Promises
  + Native Events

  - Use callback function to update state and use it again in the same function
    function handleTripleInc() {
      // setLikes(likes + 1); // 1
      // setLikes(likes + 1); // 1
      // setLikes(likes + 1);  // 1
      setLikes((likes) => likes + 1); // 1
      setLikes((likes) => likes + 1); // 2
      setLikes((likes) => likes + 1); // 3
    }

- Event propagation in the browser
1. New Event object created in the root element, 'html', and travels to the target, where event was triggered, for instance 'button' (Capturing phase)
2. Then Event object travels to root back (Bubling phase)
- By default event handlers listen to events on the target and during the building phase
- We can prevent bubbling with 
    e.stopPropagation();

- Event delegation:
  + Handling events for multiple elements centrally in one single parent element
  + Better for performance and memory, as it needs only one handler function:
      1. Add handler to parent (.options)
      2. Check for target element (e.target)
      3. If target is one of the <button>s, handle the event
- It's very common for vanilla JS apps, but not so much in React

- React registers all event handlers on the root DOM container. This is where all events are handled.
- Behind the scenes, React performs event delegation for all events in our application

- React uses SyntheticEvent - is wrapper around DOMs native event object (PointerEvent, MouseEvent, KeyboardEvent...)
- It has the same interface as native event objects, like stopPropagation() and preventDefault()
- Fixes browser inconsistencies, so that events work in the exect same way in all browsers
- Most synthetic events bubbles (including focus, blur and change), except scroll

- Difference of events in React from vanila JS:
    1. Attributes for event handlers are named using camelCase (onClick instead of onclick or click)
    2. Default behavior can NOT be prevented by returning false (only by using preventDefault())
    3. Attach 'Capture' if you need to handle during capture phase (example: onClickCapture)

- Library vs Framework: React is library!
- Framework - includes all you need. Like Angular: HTTP request, Styling, Routing, Form Management
- Library - just used for particular part. React - just for view, except React you also need to use other 3rd-party libraries for HTTP request, Styling, Routing, Form Management

- React 3rd party library ECOSYSTEM:
  1. Routing (for SPAs): React Router, React Location
  2. HTTP requests: JS fetch(), Axios
  3. Remote state management: React Query, SWR, Apollo
  4. Global state management: Context API, Redux, Zustand
  5. Styling: CSS Modules, Styled components, tailwindcss
  6. Form management: React Hiik Form, FORMIK
  7. Animations/transitions: Motion, React-spring
  8. UI components: Mi, chakra, Mantime

- Opinionated React frameworks: Next.js, Remix, Gatsby. It's alternative for first approach

- Summary
  - Component - is like blueprint for a piece of UI. React creates a component instance. When a component instance is rendered, it will return React element
  - Rendering - calls component functions and calculating what DOM elements need to be updated/ Each time a component instance is rendered or re-rendered, the function is called again
  - Only the initial app render and state updates can cause a render, which happens for the entire app
  - When a component instance gets re-rendered, all its children will get re-render as well. This doesn't mean that all children willget updated in the DOM, thanks reconciliation, 
    which checks which element actually changed between two renders. But all this re-rendering can still have impact on performance (more on that later in the cource)
  - Diffing is how decided which DOM elements need to be added or modified.
  - Giving elements a key prop allows React to avoid destroying elements or reset state
  - Never declare a new component inside another component
  - The logic that produces JSX output for a component instance ("render logic") is not allowed to produce any side effects: no API calls, no timers, no object or variable mutations, no state updates. 
    Side effects are allowed in event handlers and useEffect
  - The DOM is updated in the commit phase, but not by React, but by a "rendered" called ReactDOM
  - Multiple state updates inside the handler function are batched, so it happens only one re-render.
  - Synthetic event object
  - React is a library, not a framework.

*****************************************************************************************************************
Section 12: Effects and Data Fetching
*****************************************************************************************************************

- Component lifecycle:
    1. Mount / Initial render
        + Component instance is rendered for the first time
        + Fresh state and props are created
    2. Re-render 
        + State changes
        + Props change
        + Parent re-render
        + Context changes
    3. Unmount
        + Component instance is destroyed and removed
        + State and props are destroyed

- Side effect is basically any "interaction between a React component and the world outside the component". 
Also when code that actually does something: data fetching, setting up subscriptions, setting up timers, manually accessing the DOM

- Side effects:
  + Event handlers
  + EFFECTS (useEffect) - allows us to write code that will run at different moments: mount, re-render or Unmount

  useEffect(function () {
    fetch(`http://www.omdbapi.com/?apikey=${KEY}&s=interstellar`)
      .then((res) => res.json())
      .then((data) => {
        setMovies(data.Search);
      });
      return () => console.log('Cleanup') // Cleanup function
  }, []); // [] - Dependancy array
